// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/recs/repository.go

// Package mock_recs is a generated GoMock package.
package mock_recs

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/webbsalad/storya-recs-backend/internal/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeletePeferences mocks base method.
func (m *MockRepository) DeletePeferences(ctx context.Context, userID model.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePeferences", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePeferences indicates an expected call of DeletePeferences.
func (mr *MockRepositoryMockRecorder) DeletePeferences(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePeferences", reflect.TypeOf((*MockRepository)(nil).DeletePeferences), ctx, userID)
}

// GetPreferences mocks base method.
func (m *MockRepository) GetPreferences(ctx context.Context, userID model.UserID) ([]model.Preference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferences", ctx, userID)
	ret0, _ := ret[0].([]model.Preference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferences indicates an expected call of GetPreferences.
func (mr *MockRepositoryMockRecorder) GetPreferences(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferences", reflect.TypeOf((*MockRepository)(nil).GetPreferences), ctx, userID)
}

// UpdatePreferences mocks base method.
func (m *MockRepository) UpdatePreferences(ctx context.Context, userID model.UserID, ratedTags []model.RatedTag) ([]model.Preference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreferences", ctx, userID, ratedTags)
	ret0, _ := ret[0].([]model.Preference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePreferences indicates an expected call of UpdatePreferences.
func (mr *MockRepositoryMockRecorder) UpdatePreferences(ctx, userID, ratedTags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreferences", reflect.TypeOf((*MockRepository)(nil).UpdatePreferences), ctx, userID, ratedTags)
}
