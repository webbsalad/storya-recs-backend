// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/recs/recs_service.proto

package recs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _recs_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UserID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserIDMultiError, or nil if none found.
func (m *UserID) ValidateAll() error {
	return m.validate(true)
}

func (m *UserID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UserIDValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserIDMultiError(errors)
	}

	return nil
}

func (m *UserID) _validateUuid(uuid string) error {
	if matched := _recs_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UserIDMultiError is an error wrapping multiple validation errors returned by
// UserID.ValidateAll() if the designated constraints aren't met.
type UserIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIDMultiError) AllErrors() []error { return m }

// UserIDValidationError is the validation error returned by UserID.Validate if
// the designated constraints aren't met.
type UserIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIDValidationError) ErrorName() string { return "UserIDValidationError" }

// Error satisfies the builtin error interface
func (e UserIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIDValidationError{}

// Validate checks the field values on Preferences with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Preferences) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Preferences with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PreferencesMultiError, or
// nil if none found.
func (m *Preferences) ValidateAll() error {
	return m.validate(true)
}

func (m *Preferences) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTagRatings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PreferencesValidationError{
						field:  fmt.Sprintf("TagRatings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PreferencesValidationError{
						field:  fmt.Sprintf("TagRatings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PreferencesValidationError{
					field:  fmt.Sprintf("TagRatings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PreferencesMultiError(errors)
	}

	return nil
}

// PreferencesMultiError is an error wrapping multiple validation errors
// returned by Preferences.ValidateAll() if the designated constraints aren't met.
type PreferencesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreferencesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreferencesMultiError) AllErrors() []error { return m }

// PreferencesValidationError is the validation error returned by
// Preferences.Validate if the designated constraints aren't met.
type PreferencesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreferencesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreferencesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreferencesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreferencesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreferencesValidationError) ErrorName() string { return "PreferencesValidationError" }

// Error satisfies the builtin error interface
func (e PreferencesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreferences.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreferencesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreferencesValidationError{}

// Validate checks the field values on UpdatePreferencesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePreferencesRequestMultiError, or nil if none found.
func (m *UpdatePreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	for idx, item := range m.GetTagRatings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePreferencesRequestValidationError{
						field:  fmt.Sprintf("TagRatings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePreferencesRequestValidationError{
						field:  fmt.Sprintf("TagRatings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePreferencesRequestValidationError{
					field:  fmt.Sprintf("TagRatings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdatePreferencesRequestMultiError(errors)
	}

	return nil
}

// UpdatePreferencesRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePreferencesRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePreferencesRequestMultiError) AllErrors() []error { return m }

// UpdatePreferencesRequestValidationError is the validation error returned by
// UpdatePreferencesRequest.Validate if the designated constraints aren't met.
type UpdatePreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePreferencesRequestValidationError) ErrorName() string {
	return "UpdatePreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePreferencesRequestValidationError{}

// Validate checks the field values on NewRecResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewRecResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewRecResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewRecResponseMultiError,
// or nil if none found.
func (m *NewRecResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NewRecResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NewRecResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NewRecResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NewRecResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NewRecResponseMultiError(errors)
	}

	return nil
}

// NewRecResponseMultiError is an error wrapping multiple validation errors
// returned by NewRecResponse.ValidateAll() if the designated constraints
// aren't met.
type NewRecResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewRecResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewRecResponseMultiError) AllErrors() []error { return m }

// NewRecResponseValidationError is the validation error returned by
// NewRecResponse.Validate if the designated constraints aren't met.
type NewRecResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewRecResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewRecResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewRecResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewRecResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewRecResponseValidationError) ErrorName() string { return "NewRecResponseValidationError" }

// Error satisfies the builtin error interface
func (e NewRecResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewRecResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewRecResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewRecResponseValidationError{}
