// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/recs/recs_service.proto

package recs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _recs_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetPreferencesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPreferencesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPreferencesRequestMultiError, or nil if none found.
func (m *GetPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetPreferencesRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPreferencesRequestMultiError(errors)
	}

	return nil
}

func (m *GetPreferencesRequest) _validateUuid(uuid string) error {
	if matched := _recs_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetPreferencesRequestMultiError is an error wrapping multiple validation
// errors returned by GetPreferencesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPreferencesRequestMultiError) AllErrors() []error { return m }

// GetPreferencesRequestValidationError is the validation error returned by
// GetPreferencesRequest.Validate if the designated constraints aren't met.
type GetPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPreferencesRequestValidationError) ErrorName() string {
	return "GetPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPreferencesRequestValidationError{}

// Validate checks the field values on GetPreferencesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPreferencesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPreferencesResponseMultiError, or nil if none found.
func (m *GetPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPreferencesResponseMultiError(errors)
	}

	return nil
}

// GetPreferencesResponseMultiError is an error wrapping multiple validation
// errors returned by GetPreferencesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPreferencesResponseMultiError) AllErrors() []error { return m }

// GetPreferencesResponseValidationError is the validation error returned by
// GetPreferencesResponse.Validate if the designated constraints aren't met.
type GetPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPreferencesResponseValidationError) ErrorName() string {
	return "GetPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPreferencesResponseValidationError{}

// Validate checks the field values on UpdatePreferencesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePreferencesRequestMultiError, or nil if none found.
func (m *UpdatePreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	for idx, item := range m.GetRatedTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePreferencesRequestValidationError{
						field:  fmt.Sprintf("RatedTags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePreferencesRequestValidationError{
						field:  fmt.Sprintf("RatedTags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePreferencesRequestValidationError{
					field:  fmt.Sprintf("RatedTags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdatePreferencesRequestMultiError(errors)
	}

	return nil
}

// UpdatePreferencesRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePreferencesRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePreferencesRequestMultiError) AllErrors() []error { return m }

// UpdatePreferencesRequestValidationError is the validation error returned by
// UpdatePreferencesRequest.Validate if the designated constraints aren't met.
type UpdatePreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePreferencesRequestValidationError) ErrorName() string {
	return "UpdatePreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePreferencesRequestValidationError{}

// Validate checks the field values on UpdatePreferencesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePreferencesResponseMultiError, or nil if none found.
func (m *UpdatePreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdatePreferencesResponseMultiError(errors)
	}

	return nil
}

// UpdatePreferencesResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePreferencesResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdatePreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePreferencesResponseMultiError) AllErrors() []error { return m }

// UpdatePreferencesResponseValidationError is the validation error returned by
// UpdatePreferencesResponse.Validate if the designated constraints aren't met.
type UpdatePreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePreferencesResponseValidationError) ErrorName() string {
	return "UpdatePreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePreferencesResponseValidationError{}

// Validate checks the field values on GetNewRecRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNewRecRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNewRecRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNewRecRequestMultiError, or nil if none found.
func (m *GetNewRecRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNewRecRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetNewRecRequestMultiError(errors)
	}

	return nil
}

// GetNewRecRequestMultiError is an error wrapping multiple validation errors
// returned by GetNewRecRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNewRecRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNewRecRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNewRecRequestMultiError) AllErrors() []error { return m }

// GetNewRecRequestValidationError is the validation error returned by
// GetNewRecRequest.Validate if the designated constraints aren't met.
type GetNewRecRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNewRecRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNewRecRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNewRecRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNewRecRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNewRecRequestValidationError) ErrorName() string { return "GetNewRecRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetNewRecRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNewRecRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNewRecRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNewRecRequestValidationError{}

// Validate checks the field values on GetNewRecResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNewRecResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNewRecResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNewRecResponseMultiError, or nil if none found.
func (m *GetNewRecResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNewRecResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetNewRecResponseMultiError(errors)
	}

	return nil
}

// GetNewRecResponseMultiError is an error wrapping multiple validation errors
// returned by GetNewRecResponse.ValidateAll() if the designated constraints
// aren't met.
type GetNewRecResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNewRecResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNewRecResponseMultiError) AllErrors() []error { return m }

// GetNewRecResponseValidationError is the validation error returned by
// GetNewRecResponse.Validate if the designated constraints aren't met.
type GetNewRecResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNewRecResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNewRecResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNewRecResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNewRecResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNewRecResponseValidationError) ErrorName() string {
	return "GetNewRecResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNewRecResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNewRecResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNewRecResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNewRecResponseValidationError{}
